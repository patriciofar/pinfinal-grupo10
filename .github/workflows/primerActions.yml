name: Deploy EC2 with UserData Script

on:
  push:
    branches:
      - master  # O la rama que prefieras

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Paso 1: Check out el código
      - name: Check out repository
        uses: actions/checkout@v3

      # Paso 2: Configuración de las credenciales de AWS
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Paso 3: Verificar que el archivo ec2_user_data.sh está presente
      - name: Check that the ec2_user_data.sh script is available
        run: |
          cat ec2_user_data.sh

      # Paso 4: Conectarse a la instancia EC2 y ejecutar el archivo ec2_user_data.sh
      - name: Connect to EC2 instance and run user_data.sh
        env:
          EC2_IP: ${{ secrets.EC2_IP }}  # IP pública de la EC2, configurada como secreto
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}  # La clave privada SSH, configurada como secreto
        run: |
          # Conexión SSH a la instancia EC2 y ejecución del archivo ec2_user_data.sh
          echo "$SSH_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          ssh -o StrictHostKeyChecking=no -i private_key.pem ec2-user@$EC2_IP << 'EOF'
            echo "Subiendo y ejecutando el archivo ec2_user_data.sh"
            
            # Subir el archivo ec2_user_data.sh desde GitHub Actions a la instancia EC2
            echo "$USER_DATA" > /home/ec2-user/ec2_user_data.sh
            
            # Darle permisos de ejecución al archivo
            chmod +x /home/ec2-user/ec2_user_data.sh
            
            # Ejecutar el archivo ec2_user_data.sh
            sudo /home/ec2-user/ec2_user_data.sh
            
          EOF

      # Paso 5: Verificar el estado de la instancia
      - name: Check EC2 instance status
        run: |
          # Obtener el ID de la instancia (si es necesario)
          INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=ip-address,Values=${{ secrets.EC2_IP }}" --query 'Reservations[0].Instances[0].InstanceId' --output text)
          echo "La instancia EC2 se está ejecutando con ID: $INSTANCE_ID"
          aws ec2 describe-instances --instance-ids $INSTANCE_ID --query 'Reservations[0].Instances[0].State.Name' --output text
      
      # Paso 6: Crear el cluster de EKS utilizando eksctl
      - name: Create EKS Cluster with eksctl
        run: |
          chmod +x 01_eksctl/create-cluster.sh
          ./01_eksctl/create-cluster.sh

      # Paso 7: Verificar el estado del cluster de EKS
      - name: Verify EKS Cluster Status
        run: |
          aws eks describe-cluster --name eks-mundos-e --query "cluster.status"

      # Paso 8: Desplegar un pod de nginx en el cluster de EKS
      - name: Deploy nginx pod in EKS
        run: |
          # Configurar kubectl para usar el cluster de EKS
          aws eks update-kubeconfig --name eks-mundos-e --region us-east-1

          # Desplegar un pod de nginx en el cluster
          kubectl run nginx --image=nginx --restart=Never
          
      # Paso 9: Verificar que el pod nginx esté corriendo
      - name: Check nginx pod status
        run: |
          kubectl get pods -l run=nginx
      
      # Paso 10: Instalar Prometheus usando Helm
      - name: Install Prometheus with Helm
        run: |
          # Añadir el repositorio de Prometheus
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update

          # Instalar Prometheus en el namespace prometheus
          helm install prometheus prometheus-community/prometheus --namespace prometheus --set alertmanager.persistentVolume.storageClass="gp2" --set server.persistentVolume.storageClass="gp2"

      # Paso 11: Instalar Grafana usando Helm
      - name: Install Grafana with Helm
        run: |
          # Añadir el repositorio de Grafana
          helm repo add grafana https://grafana.github.io/helm-charts
          helm repo update

          # Instalar Grafana en el namespace grafana
          helm install grafana grafana/grafana --namespace grafana \
            --set persistence.storageClassName="gp2" \
            --set persistence.enabled=true \
            --set adminPassword='EKS!sAWSome' \
            --values ./grafana.yaml \
            --set service.type=LoadBalancer

      # Paso 12: Obtener la URL de Grafana
      - name: Get Grafana URL
        run: |
          kubectl get svc -n grafana
